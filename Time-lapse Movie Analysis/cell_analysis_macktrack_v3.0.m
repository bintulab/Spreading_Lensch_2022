
%Written by Joydeb Sinha 09/01/2019
%Updated: 12/20/2019 with lineage information
% Purpose: to filter traces generated by MackTrack
% for post analysis. Made for chromatin spreading project.
% requires copychildren function in your matlab directory to use.
% run this first before stitching script


%%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DATA IMPORT%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   %add allmeasurements.mat to your matlab workspace via drag/drop 

 % % % Use this to import if allmeasurements.mat is created (for small experiment with few sites)
 %load('AllMeasurements.mat');
 
 
 %if large experiment, MACKtrack will generate individual measurement files
 %
 CellData=AllMeasurements.CellData;
 IntegratedNuc1=AllMeasurements.IntegratedNuc1;%nuclear trace integrated signal in nucleus (ifp)
 IntegratedNuc2=AllMeasurements.IntegratedNuc2;%nuclear trace integrated signal in nucleus (mcherry)
 IntegratedNuc3=AllMeasurements.IntegratedNuc3;%nuclear trace integrated signal in nucleus (citrine)
  %%
  
  %inititate cell ID to define children cell from same parent
 origin = zeros(size(CellData,1),1);

for i = 1:size(CellData,1)
    idx = CellData(i,5);
    if idx ~= 0
        while CellData(idx,5) ~= 0
            idx = CellData(idx,5);
        end
        origin(i) = idx;
    else
        origin(i) = i;
    end
end
CellData= [CellData,origin];
 
  
  
%currently using mcherry trace to track as nucleus
  


%copy over parent trajectory measurement into daughter cell traces

 channel_0 = double(copychildren(IntegratedNuc1,CellData)); %ifp
 channel_1 = double(copychildren(IntegratedNuc2,CellData));%mcherry
 channel_2 = double(copychildren(IntegratedNuc3,CellData));%mcitrine  (note: we tracked on citrine) 
 nucleus = double(copychildren(IntegratedNuc3,CellData));  %change based on what you track on 
 nucleus=double(nucleus./nanmean(nucleus(:,3))); %normalize nuclear trace to mean
 
 
 
c1=[255 169 0]./255; %yellow
c2=[250, 29, 29]./255; %red

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Primary Filter: Drop bad cells, pre-silenced cells etc...%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%can modify parameters here based on your personal criteria/experiments

drops = [];
drops = cat(2,drops,sum(isnan(channel_1),2)>0); % drop cells with nan values
drops = cat(2,drops,sum(channel_0==0,2)>0);    % drop cells with dropped frames or zero signal
drops = cat(2,drops,(nanmedian(channel_2(:,[1:10]),2)<0.2)); % drop already silenced cells at beginning of experiment %re-added



%drops = cat(2,drops,sum(channel_2(:,[end-10:end])>2e4,2)>0); %drop cells that did not silence citrine% if using dox %%%%%
%drops = cat(2,drops,sum(channel_2(:,[end-10:end])<0,2)>0); %drop cells that have negative measurements %%%%%
%drops = cat(2,drops,sum(channel_2(:,[end-10:end])<0,2)>0); %drop cells that have negative measurements %%%%%



%drops = cat(2,drops,sum(nucleus(:,[1:end])<0.1,2)>0);%drop extremely weak objects
drops = cat(2,drops,sum(channel_0==NaN,2)>0);
%drops = cat(2,drops,channel_1(:,1)<1e4); % drop weak ifp cells 



keep0 = sum(drops,2)==0;  %make a dummy variable to test objects that pass criteria
test_traces=double(nucleus(keep0,:));
test_traces= bsxfun(@minus, test_traces, min (test_traces,[],2));
test_traces= bsxfun(@rdivide,test_traces,max(test_traces,[],2));


% %subtract minima (background from each cell)
     channel_0= bsxfun(@minus, channel_0, min (channel_0,[],2));
   channel_1= bsxfun(@minus, channel_1, min (channel_1,[],2));
     channel_2= bsxfun(@minus, channel_2, min (channel_2,[],2));
% 
% %divide by maxima (normalize) 
% 
   channel_0=bsxfun(@rdivide,channel_0,max(channel_0,[],2));
   channel_1=bsxfun(@rdivide,channel_1,max(channel_1,[],2));
  channel_2=bsxfun(@rdivide,channel_2,max(channel_2,[],2));
% % 

%%
%%%test/modify peak finding parametshere for calling h2b/nuclear marker 

%test your data against automated filter to drop poorly tracked cells 
%adjust 'Minpeak Height' or 'Min Peak Distance parameters' until happy 
%this line of code does not mess with your data, but just lets you test
%parameters for the next segment of code, prior to running


rc=randperm(1000,36);
figure(1)
for kk=1:length(rc)
subplot(6,6,kk)
plot(medfilt1(test_traces(rc(kk),:))),hold on, findpeaks((movstd((medfilt1(test_traces(rc(kk),:))),2)),'MinPeakHeight',0.1,'MinPeakDistance',4),legend({'Int.Nuc','Mov.STD'},'Location','southeast')
%hold on, findpeaks((movstd((reverb(rc(kk),:)),2)),'MinPeakHeight',0.3,'MinPeakDistance',2),legend({'Int.Nuc','Mov.STD'},'Location','southeast') %((movstd((nucleus_filtered(3,:)),10)),'MinPeakProminence',20000,'MinPeakDistance',5,'MinPeakHeight',50000)

kk=kk+1;

end


%usually set minpeak height between 0.1 to 0.3
%usally set min peak distance between 5 and 40 


%%

%Filter  abberant H2B spikes and omit these cells using peak filter
%Note: must use same parameters as you determined above for MinpeakHeight
%and MinPeakDistance


pp=[];
for j=1:size(nucleus,1)
  
  [peaks,locs]= findpeaks(medfilt1((movstd((nucleus(j,:)),2))),'MinPeakHeight',0.1,'MinPeakDistance',4); 
  
  [msg, id] = lastwarn;warning('off', id); %,figure, plot (nucleus_filtered(3,:))
  
  if isempty(peaks)
      
      pp(j,1)=0; pp(j,2)=0;
  else
      
      pp(j,1)=numel(peaks);  pp(j,2)=max(peaks);
 
  end
  
  
  j=j+1;
     if mod(j,1000)==1
  strcat(num2str((j/size(channel_2,1))*100),'%')
     end
end

subplot(1,2,1)
title('number of jumps')
histogram(pp(:,1))
subplot(1,2,2)
title('max magnitude of jump')
histogram(pp(:,2))



%%

%Drop cells that fail the peak calling filter 
%can define number of peaks to trigger cell omission. Usually set between 5-9

filtered_cells2=(pp(:,1)>9);%binary column vector ones=omitted cells





drops = cat(2,drops,filtered_cells2);
keep = sum(drops,2)==0;

channel_0_filtered=double(channel_0(keep,:));
channel_1_filtered=double(channel_1(keep,:));
channel_2_filtered=double(channel_2(keep,:));

celldata1 = double(CellData(keep,:));
celldata1 = round(celldata1*100)/100; %Filtered Data


%%
lineage_data1=complex(celldata1(:,1),celldata1(:,7)); %make barcode denoting lineage



%%

%Can define which cells to pick out. Group by conditions (eg. krab 5kb
%wells)

get_cells = @(wells) ismember(floor(celldata1(:,1)),wells);% search cell data column 1 for well index
%define wells here eg combine similar conditions
%wells=[4:57]; %nospacer hdac
%wells=[63:116,121:150];%5kbspacer hdac
wells=[44,45,46,47,48,66,67,68,69,70,79,80,81,82];%5kbspacer krab
%wells=[1:3,58:60] %nodox
%wells= [60,61,63,118,119,120]; %nodox 5kb

ifp_select=(channel_0_filtered(get_cells(wells(1:end)),:));
citrine_select=(channel_2_filtered(get_cells(wells(1:end)),:));
mcherry_select=(channel_1_filtered(get_cells(wells(1:end)),:));
lineage_data_select=lineage_data1(get_cells(wells(1:end)));



% nucleus_select=nucleus_filtered(get_cells(wells(1:end)),:);
% 
% [C,ia,ic]=unique(round(citrine_select(:,1:6),3),'rows');
% ifp_select=ifp_select(ia,:);
% citrine_select=citrine_select(ia,:);
% mcherry_select=mcherry_select(ia,:);


%%

%make a test plot, for sanity check you called the right wells
time=(1:1:size(mcherry_select,2))./3
z=randperm(size(citrine_select,1),9);



for n=1:9
subplot(3,3,n)
%plot(smooth((citrine_select(z(n),:)),1),'color',c1,'linewidth',1),hold on,yyaxis right,plot(smooth((mcherry_select(z(n),:)),1),'color',c2,'linewidth',1),axis tight,grid on
plot(time,smooth((citrine_select(z(n),:)),1),'color',c1,'linewidth',1),hold on,yyaxis right,plot(time,smooth((mcherry_select(z(n),:)),1),'color',c2,'linewidth',1),axis tight
legend('Citrine','mCherry')


end
%%

%If you choose, you can manually select cells that tracked well here. To
%show example traces et....

% c=[1,2,3,4,6,7,8,14,28,30,32,34,37,38,42,47,49,54,58];
c=[1:size(citrine_select,1)];

citgood=[];
mchgood=[];
ifpgood=[];
for j=1:size(c,2)
cit_good(j,:)=citrine_select(c(j),:);
mch_good(j,:)=mcherry_select(c(j),:);
ifp_good(j,:)=ifp_select(c(j),:);
end
%%
c2=[220, 29, 29]./255;
z=randperm(size(citrine_select,1),49);
time=(1:size(cit_good,2))./3;
for k=1:49
subplot(7,7,k)
plot(time,(cit_good(z(k),:)),'color',c1,'linewidth',1),hold on,yyaxis right,plot(time,(mch_good(z(k),:)),'color',c2,'linewidth',1),axis tight
xlabel('Time (hr)')
% legend('citrine','mcherry'),xlabel('time (hr)'),ylabel ('intensity (a.u)')
end


%%